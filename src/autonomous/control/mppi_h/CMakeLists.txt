cmake_minimum_required(VERSION 3.8)
project(mppi_h)

# Default to C++17
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

# Optimization flags for performance
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
  # Add optimization flags for Release build
  if(CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_options(-O3 -march=native -DNDEBUG)
  endif()
endif()

# parameters
option(USE_OPENMP "USE_OPENMP" ON) # ON / OFF

## Find ament packages
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(tf2 REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(grid_map_core REQUIRED)
find_package(grid_map_ros REQUIRED)
find_package(grid_map_msgs REQUIRED)
find_package(grid_map_visualization REQUIRED)
find_package(mppi_eval_msgs REQUIRED)

# use eigen3 (matrix computation library)
find_package(Eigen3 REQUIRED)

# load openmp
if(USE_OPENMP)
  find_package(OpenMP REQUIRED)
  if(OpenMP_FOUND)
      message(WARNING "OpenMP found. Activate CPU acceleration.")
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
      set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  endif()
  if(NOT OPENMP_FOUND)
      message(FATAL ERROR "Unable to find OpenMP library.")
  endif()
endif()

# Define dependencies for ament
set(dependencies
  rclcpp
  geometry_msgs
  visualization_msgs
  nav_msgs
  tf2
  tf2_geometry_msgs
  tf2_ros
  grid_map_core
  grid_map_ros
  grid_map_msgs
  grid_map_visualization
  mppi_eval_msgs
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${EIGEN3_INCLUDE_DIR}
)

## Declare a C++ library
add_library(mppi_h_core SHARED src/mppi_h_core.cpp)
add_library(mppi_mode1_core SHARED src/mode1_mppi_3d/mppi_3d_core.cpp)
add_library(mppi_mode2_core SHARED src/mode2_mppi_4d/mppi_4d_core.cpp)

## link openmp
if(USE_OPENMP)
  if (OPENMP_FOUND)
      if (TARGET OpenMP::OpenMP_CXX)
          target_link_libraries(mppi_mode1_core OpenMP::OpenMP_CXX)
          target_link_libraries(mppi_mode2_core OpenMP::OpenMP_CXX)
      endif()
  endif()
endif()

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(${PROJECT_NAME}_node src/mppi_h_node.cpp src/mppi_h.cpp)

## Add ament target dependencies
ament_target_dependencies(${PROJECT_NAME}_node ${dependencies})
ament_target_dependencies(mppi_h_core ${dependencies})
ament_target_dependencies(mppi_mode1_core ${dependencies})
ament_target_dependencies(mppi_mode2_core ${dependencies})

## Specify libraries to link a library or executable target against
target_link_libraries(${PROJECT_NAME}_node
  mppi_h_core
  mppi_mode1_core
  mppi_mode2_core
)

#############
## Install ##
#############

## Install executables
install(TARGETS ${PROJECT_NAME}_node
  DESTINATION lib/${PROJECT_NAME}
)

## Install libraries
install(TARGETS mppi_h_core mppi_mode1_core mppi_mode2_core
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

## Install directories
install(
  DIRECTORY launch config include/
  DESTINATION share/${PROJECT_NAME}/
)

## Export ament package
ament_package()
